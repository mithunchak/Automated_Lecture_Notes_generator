# Lecture Notes: Expn - tree

# "Expression Trees in Data Structures"

### 1. Introduction to Expression Trees

**1. Introduction to Expression Trees**

An expression tree is a data structure used to represent mathematical expressions in a tree-like structure. It is a variant of the binary tree data structure, where each node represents an operand or an operator. The tree is constructed by scanning a postfix expression, one symbol at a time, and creating a new node for each operand or operator.

**Key Concepts:**

* **Expression Tree:** A data structure used to represent mathematical expressions in a tree-like structure.
* **Postfix Expression:** A type of expression where the operator follows the operands.
* **Immutable:** Once an expression tree is constructed, it cannot be modified. To change the expression, another tree must be constructed.

**Important Points:**

• The expression tree is built by scanning a postfix expression, one symbol at a time.
• When an operand is received, a new node is created, which will be a leaf in the expression tree.
• When an operator is received, it connects to two leaves.
• The stack data structure is used as an intermediary storing place for node addresses.
• The tree is constructed by repeatedly creating new nodes, connecting them, and pushing their addresses onto the stack.

**Example:**

Consider the postfix expression "abc*+". The expression tree construction process can be demonstrated as follows:

1. Receive the symbol "a" and create a new node with address 100. Push the address onto the stack.
2. Receive the symbol "b" and create a new node with address 150. Push the address onto the stack.
3. Receive the symbol "c" and create a new node with address 300. Push the address onto the stack.
4. Receive the symbol "*" and create a new node with address 250. Pop the address of node 300 from the stack and make it the right child of the new node. Pop the address of node 150 from the stack and make it the left child of the new node. Push the address of the new node onto the stack.
5. Receive the symbol "+" and create a new node with address 400. Pop the address of node 250 from the stack and make it the right child of the new node. Pop the address of node 100 from the stack and make it the left child of the new node. Push the address of the new node onto the stack.

The resulting expression tree has the root node with address 400, and the leaf nodes with addresses 100, 150, and 300.

### 2. Construction of Expression Trees

**Construction of Expression Trees**

**Definition:** An expression tree is a binary tree that represents a mathematical expression. It is constructed from a postfix expression, where the operands are evaluated first, and then the operators are applied.

**Key Concepts:**

* **Postfix Expression:** A postfix expression is a string of symbols where operators follow their operands. For example, the postfix expression "abc*+" represents the expression "a * (b + c)".
* **Expression Tree:** An expression tree is a binary tree that represents a mathematical expression. It is constructed from a postfix expression, where the operands are evaluated first, and then the operators are applied.

**Construction of Expression Tree:**

The construction of an expression tree involves the following steps:

* Scan the postfix expression till the end, one symbol at a time.
* Create a new node with the symbol as info and left and right links as NULL.
* If the symbol is an operand, push the address of the node to the stack.
* If the symbol is an operator:
	+ Pop the address from the stack and make it the right child of the new node.
	+ Pop the address from the stack and make it the left child of the new node.
	+ Now push the address of the new node to the stack.
* Finally, the stack has only one element, which is the address of the root of the expression tree.

**Example:**

Suppose we have the postfix expression "abc*+". We can construct the expression tree as follows:

* Create a new node with the symbol "a" as info and left and right links as NULL.
* Push the address of the node to the stack.
* Create a new node with the symbol "*" as info and left and right links as NULL.
* Pop the address from the stack and make it the right child of the new node.
* Pop the address from the stack and make it the left child of the new node.
* Create a new node with the symbol "+" as info and left and right links as NULL.
* Pop the address from the stack and make it the right child of the new node.
* Pop the address from the stack and make it the left child of the new node.
* Push the address of the new node to the stack.
* Finally, the stack has only one element, which is the address of the root of the expression tree.

**Algorithm:**

The algorithm for constructing an expression tree from a postfix expression is as follows:

1. Initialize an empty stack.
2. Scan the postfix expression till the end, one symbol at a time.
3. If the symbol is an operand, push the address of the node to the stack.
4. If the symbol is an operator:
	+ Pop the address from the stack and make it the right child of the new node.
	+ Pop the address from the stack and make it the left child of the new node.
	+ Now push the address of the new node to the stack.
5. Finally, the stack has only one element, which is the address of the root of the expression tree.

**Example Code:**

The following is an example code in C++ that constructs an expression tree from a postfix expression:
```c
#include <iostream>
#include <stack>

using namespace std;

struct Node {
    char info;
    Node* left;
    Node* right;
};

Node* constructExpressionTree(char* postfixExpression) {
    stack<Node*> nodeStack;
    Node* root = NULL;

    for (int i = 0; postfixExpression[i] != '\0'; i++) {
        if (postfixExpression[i] == ' ') {
            continue;
        }

        if (postfixExpression[i] == '+' || postfixExpression[i] == '*' || postfixExpression[i] == '-') {
            Node* rightChild = nodeStack.top();
            nodeStack.pop();
            Node* leftChild = nodeStack.top();
            nodeStack.pop();
            Node* newNode = new Node();
            newNode->info = postfixExpression[i];
            newNode->left = leftChild;
            newNode->right = rightChild;
            nodeStack.push(newNode);
        } else {
            Node* newNode = new Node();
            newNode->info = postfixExpression[i];
            newNode->left = NULL;
            newNode->right = NULL;
            nodeStack.push(newNode);
        }
    }

    root = nodeStack.top();
    nodeStack.pop();

    return root;
}

int main() {
    char* postfixExpression = "abc*+";
    Node* root = constructExpressionTree(postfixExpression);

    // Evaluate the expression tree
    int result = evaluateExpressionTree(root);

    cout << "Result: " << result << endl;

    return 0;
}

int evaluateExpressionTree(Node* node) {
    if (node == NULL) {
        return 0;
    }

    if (node->info == '+') {
        return evaluateExpressionTree(node->left) + evaluateExpressionTree(node->right);
    } else if (node->info == '*') {
        return evaluateExpressionTree(node->left) * evaluateExpressionTree(node->right);
    } else {
        return node->info - '0';
    }
}
```
This code constructs an expression tree from a postfix expression and evaluates the expression tree using a recursive function.

### 3. Binary Expression Trees

**3. Binary Expression Trees**

A binary expression tree is a type of expression tree where each node has a maximum of two branches, i.e., a left child and a right child. This is in contrast to a general expression tree, which can have more than two branches.

**Key Concepts:**

* **Binary Expression Tree:** A tree data structure where each node has a maximum of two branches (left child and right child).
* **Node:** A single element in the tree, representing an operator or operand.
* **Operator:** A node that performs an operation on its children.
* **Operand:** A node that represents a value.
* **Left Child:** The leftmost child of a node.
* **Right Child:** The rightmost child of a node.
* **Sibling:** A node that has the same parent as another node.

**Important Points:**

• A binary expression tree is constructed by scanning a postfix expression from left to right.
• Each node in the tree represents an operator or operand.
• An operator node has two children, a left child and a right child.
• An operand node has no children.
• The left child of an operator node is the leftmost operand, and the right child is the rightmost operand.
• Siblings are nodes that have the same parent.

**Example:**

Suppose we have the postfix expression "2 3 + 5 9 + 4". We can construct the binary expression tree as follows:

* Create a new node with the symbol "+" and set its left and right links to NULL.
* Push the address of the new node to the stack.
* Scan the postfix expression and find the next symbol, which is "2".
* Create a new node with the symbol "2" and set its left and right links to NULL.
* Push the address of the new node to the stack.
* Scan the postfix expression and find the next symbol, which is "3".
* Create a new node with the symbol "3" and set its left and right links to NULL.
* Push the address of the new node to the stack.
* Continue this process until the end of the postfix expression.

The resulting binary expression tree would be:

       +
      / \
     2   3
       +
      / \
     5   9
       +
      / \
     4

**Evaluation:**

To evaluate the binary expression tree, we start at the root node and recursively apply the operators to the operands. In this example, we would evaluate the tree as follows:

* Start at the root node "+" and apply it to its left child "2" and right child "3" to get "5".
* Move to the next node "+" and apply it to its left child "5" and right child "9" to get "14".
* Move to the next node "+" and apply it to its left child "14" and right child "4" to get "18".

The final evaluated value is 18.

### 4. General Expression Trees

**4. General Expression Trees**

**Definition:** A general expression tree is a data structure that represents an expression in a tree-like structure. It is a fundamental data structure used to evaluate expressions and is particularly useful in programming languages, compiler design, and data processing.

**Key Concepts:**

* **Node:** A node in an expression tree is a basic unit that contains information about an operator or a value. It has three components:
	+ Type: Indicates whether the node contains an operator or a value.
	+ Information: The actual operator or value stored in the node.
	+ Left and Right Child Pointers: Pointer to the left and right child nodes.
* **Expression Tree Construction:** The process of constructing an expression tree from a postfix expression. The construction process involves creating nodes, connecting them, and storing the addresses of the nodes in a stack.
* **Postfix Expression:** A postfix expression is a string of symbols where operators follow their operands. For example, the postfix expression "abc*+" represents the expression "a*(b+c)".

**Important Points:**

* To create a general expression tree, start by creating a new node with the symbol as information and left and right child pointers set to null.
* If the symbol is an operand, push the address of the node to the stack.
* If the symbol is an operator, pop the address from the stack and make it the right child of the new node, then pop the address from the stack and make it the left child of the new node, and finally push the address of the new node to the stack.
* The stack will eventually contain only one element, which is the address of the root of the expression tree.

**Example:**

Suppose we want to construct an expression tree for the postfix expression "abc*+". The construction process would be as follows:

1. Create a new node with the symbol "*" as information and left and right child pointers set to null.
2. Push the address of the node to the stack.
3. Pop the address from the stack and make it the right child of the new node.
4. Pop the address from the stack and make it the left child of the new node.
5. Push the address of the new node to the stack.
6. Repeat steps 1-5 until the stack contains only one element, which is the address of the root of the expression tree.

**Formula/Algorithm:**

The algorithm for constructing an expression tree from a postfix expression is as follows:

1. Create a new node with the symbol as information and left and right child pointers set to null.
2. If the symbol is an operand, push the address of the node to the stack.
3. If the symbol is an operator, pop the address from the stack and make it the right child of the new node, then pop the address from the stack and make it the left child of the new node, and finally push the address of the new node to the stack.
4. Repeat steps 1-3 until the stack contains only one element, which is the address of the root of the expression tree.

**Evaluation of the Expression Tree:**

Once the expression tree is constructed, it can be evaluated by traversing the tree and applying the operators to the operands. The evaluation process involves replacing the child nodes with their evaluated values and then applying the operator to the resulting values.

### 5. Properties of Expression Trees

**5. Properties of Expression Trees**

An expression tree is a data structure used to represent mathematical expressions in a tree-like structure. The properties of expression trees are essential to understand their construction, evaluation, and manipulation.

**Key Concepts:**

* **Immutable:** An expression tree is immutable, meaning that once constructed, it cannot be changed. To modify an expression tree, a new tree must be constructed.
* **Postfix Expression:** A postfix expression is used to construct the expression tree. In a postfix expression, operators follow their operands.
* **Stack Data Structure:** A stack data structure is used as an intermediary to store the addresses of nodes during the construction of the expression tree.

**Properties of Expression Trees:**

* **Leaf Nodes:** Leaf nodes represent operands in the expression tree.
* **Internal Nodes:** Internal nodes represent operators in the expression tree.
* **Left and Right Children:** Each internal node has two children: a left child and a right child. The left child represents the left operand, and the right child represents the right operand.
* **Root Node:** The root node is the topmost node in the expression tree, representing the entire expression.
* **Height of the Tree:** The height of the expression tree is the number of edges between the root node and the leaf nodes.

**Important Points:**

* When constructing an expression tree, a new node is created for each symbol in the postfix expression.
* If a symbol is an operand, it is pushed onto the stack as a leaf node.
* If a symbol is an operator, it is used to connect two leaf nodes, which are then popped from the stack and made the left and right children of the new node.
* The stack is used to store the addresses of nodes during the construction of the expression tree.
* The expression tree is constructed by scanning the postfix expression from left to right, one symbol at a time.

**Formulas, Algorithms, or Examples:**

* The construction of an expression tree can be represented by the following algorithm:
	1. Initialize an empty stack.
	2. Scan the postfix expression from left to right, one symbol at a time.
	3. If the symbol is an operand, push its address onto the stack as a leaf node.
	4. If the symbol is an operator, pop two addresses from the stack, make them the left and right children of a new node, and push the address of the new node onto the stack.
	5. Repeat steps 2-4 until the end of the postfix expression.
	6. The stack will contain only one element, which is the address of the root node of the expression tree.

Note: The above algorithm is a simplified representation of the expression tree construction process. In practice, more complex algorithms may be used to handle errors and edge cases.

### 6. Applications of Expression Trees

**6. Applications of Expression Trees**

Expression trees have numerous applications in various fields, including:

* **Translation of Code to Data**: Expression trees can be used to translate code into data, allowing for easier analysis and evaluation of expressions.
* **Immutable Data Structure**: Expression trees are immutable, meaning that changing an expression requires constructing a new tree, which can be useful in certain scenarios.
* **Postfix Expression Construction**: Expression trees can be constructed from postfix expressions, which are a type of notation that reads the expression from left to right, but evaluates it from right to left.
* **Stack-Based Construction**: Expression trees can be constructed using a stack data structure, where nodes are pushed and popped as needed.

**Key Concepts:**

* **Immutable**: Expression trees are immutable, meaning that changing an expression requires constructing a new tree.
* **Postfix Expression**: A type of notation that reads the expression from left to right, but evaluates it from right to left.
* **Stack-Based Construction**: Expression trees can be constructed using a stack data structure, where nodes are pushed and popped as needed.

**Important Points:**

* Expression trees can be used to translate code into data, allowing for easier analysis and evaluation of expressions.
* Expression trees are immutable, meaning that changing an expression requires constructing a new tree.
* Postfix expressions can be used to construct expression trees.
* Stack-based construction is a common method for constructing expression trees.

**Formulas, Algorithms, or Examples:**

* The algorithm for constructing an expression tree from a postfix expression involves scanning the expression from left to right, creating a new node for each symbol, and pushing and popping nodes from a stack as needed.

**Example:**

* The postfix expression "abc*+" can be constructed into an expression tree as follows:
	+ Scan the expression from left to right, creating a new node for each symbol.
	+ Create nodes for the operands "a", "b", and "c", and push their addresses onto the stack.
	+ When the operator "*" is encountered, pop the top two nodes from the stack and make them the left and right children of a new node.
	+ Repeat this process until the end of the expression is reached.
	+ The resulting expression tree has the following structure:
		- Root node: *
		- Left child: b
		- Right child: +
		- Left child of +: a
		- Right child of +: c

